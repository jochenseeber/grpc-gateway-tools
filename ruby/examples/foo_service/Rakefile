# frozen_string_literal: true

require "bundler/setup"

require "bundler/gem_helper"
require "fileutils"
require "rake/clean"

CLOBBER << "generated"

Bundler::GemHelper.install_tasks

desc "Generate all code and documentation from proto files"
task "generate" => %w[proto:generate swagger:generate gateway:generate]

task "build" => "generate"

def proto_path
  Gem.loaded_specs.values.reject do |gem|
    Bundler::GemHelper.gemspec.name == gem.name
  end.flat_map(&:full_require_paths).reject do |d|
    Dir.glob("**/*.proto", base: d).empty?
  end
end

PROTO_FILES = Dir["**/*.proto", base: "proto"]

PROTOC = %W[grpc_tools_ruby_protoc --proto_path=proto:#{proto_path.join(":")}].freeze

namespace "proto" do
  desc "Generate Ruby code from proto files"
  task "generate" do
    command = PROTOC + %W[
      --plugin=#{Gem.bindir}/grpc_tools_ruby_protoc_plugin
      --ruby_out=generated/proto
    ]
    #    --grpc-ruby_out=generated/proto
    FileUtils.mkpath("generated/proto")
    sh(*command, *PROTO_FILES)
  end
end

namespace "swagger" do
  desc "Generate Swagger documentation from proto files"
  task "generate" do
    sh "which protoc-gen-swagger"
    command = PROTOC + %W[
      --plugin=#{Gem.bindir}/protoc-gen-swagger
      --swagger_out=generated/swagger
    ]
    FileUtils.mkpath("generated/swagger")
    sh(*command, *PROTO_FILES)
  end
end

namespace "gateway" do
  desc "Generate GRPC gateway code from proto files"
  task "generate" do
    command = PROTOC + %W[
      --plugin=#{Gem.bindir}/protoc-gen-grpc-gateway
      --grpc-gateway_out=generated/gateway
    ]
    FileUtils.mkpath("generated/gateway")
    sh(*command, *PROTO_FILES)
  end
end
